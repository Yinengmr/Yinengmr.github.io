<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yinengmr.github.io/</id>
    <title>Danny的博客</title>
    <updated>2020-04-16T07:54:42.560Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yinengmr.github.io/"/>
    <link rel="self" href="https://yinengmr.github.io/atom.xml"/>
    <subtitle>学习是一生的事情</subtitle>
    <logo>https://yinengmr.github.io/images/avatar.png</logo>
    <icon>https://yinengmr.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Danny的博客</rights>
    <entry>
        <title type="html"><![CDATA[Ubuntu18.04 以及常用软件的安装]]></title>
        <id>https://yinengmr.github.io/post/2020-04-13-001/</id>
        <link href="https://yinengmr.github.io/post/2020-04-13-001/">
        </link>
        <updated>2020-04-13T10:56:25.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="linux-简介">Linux 简介</h1>
<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>
<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="linux-简介">Linux 简介</h1>
<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>
<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>
<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<!-- more -->
<p><strong>篇幅限制这里不做过多讲述</strong>  更多请移步 <a href="https://www.runoob.com/linux/linux-intro.html">菜鸟教程 Linux 简介</a></p>
<h2 id="如何选取适合自己的操作系统">如何选取适合自己的操作系统</h2>
<p>程序开发选择ubuntu没毛病 一般办公人员如果也想体验Linux 那我不太推荐ubuntu Deepin系统更适合非程序员 它包含了所有您需要的应用程序，网页浏览器、幻灯片演示、文档编辑、电子表格、娱乐、声音和图片处理软件，即时通讯软件等等 无需费力的进行各类软件安装，它自带的图形界面足以满足非程序员的日常使用，使得非程序员无非花费太大成本即可开箱即用，据说四月中下旬即将发布v20版本</p>
<h1 id="ubuntu1804安装">ubuntu18.04安装</h1>
<p>1）ubuntu18.04  <a href="https://developer.aliyun.com/mirror/">点击下载</a><br>
2）安装工具：UltraISO（软碟通）（<a href="https://cn.ultraiso.net/xiazai.html">点击下载</a>）<br>
3）准备U盘（最好是支持USB3.0，8G或以上，备份或者清空里面的文件）<br>
4）制作启动盘</p>
<p>插入U盘使用UltraISO将镜像写入U盘</p>
<p>选择菜单选取镜像文件 点击文件-&gt;打开</p>
<figure data-type="image" tabindex="1"><img src="https://yinengmr.github.io//post-images/1586777092061.png" alt="" loading="lazy"></figure>
<p>选取文件后界面如下</p>
<figure data-type="image" tabindex="2"><img src="https://yinengmr.github.io//post-images/1586777118609.png" alt="" loading="lazy"></figure>
<p>菜单点击启动写入磁盘映像<br>
<img src="https://yinengmr.github.io//post-images/1586778507145.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="https://yinengmr.github.io//post-images/1586778406610.jpg" alt="" loading="lazy"></figure>
<p>如果此时点入外接多个U盘 请核对磁盘符 我这里是 H盘8G</p>
<p>一般写入方式默认为USB-HDD+ 无需更改</p>
<p>点击写入</p>
<p>等看到界面的消息栏中出现刻录成功的日志就说明镜像写入完成，至此启动盘制作完成！</p>
<p>5）系统安装<br>
关闭目标主机，然后插入U盘，开机迅速按F12 进入BIOS设置界面（不同的电脑进入 bios 的按键不同，一般为 F12 / ESC 或者 Delete 键）选择U盘启动 一般为EFI USB Devices 选项</p>
<details><summary><b>各类电脑进入BIOS的方法</b></summary>
<p>
<h2 id="按照电脑品牌分类">按照电脑品牌分类</h2>
<table>
<thead>
<tr>
<th>电脑品牌</th>
<th>键</th>
</tr>
</thead>
<tbody>
<tr>
<td>ibm/thinkPad</td>
<td>F1</td>
</tr>
<tr>
<td>惠普/hp</td>
<td>F2/F10</td>
</tr>
<tr>
<td>索尼sony、戴尔Dell、弘基Acer</td>
<td>F2</td>
</tr>
<tr>
<td>华硕ASUS</td>
<td>ESC/F2/F12</td>
</tr>
</tbody>
</table>
<h2 id="按照主板品牌分类">按照主板品牌分类</h2>
<table>
<thead>
<tr>
<th>主板品牌</th>
<th>键</th>
</tr>
</thead>
<tbody>
<tr>
<td>华硕主板、盈通主板</td>
<td>F8</td>
</tr>
<tr>
<td>技嘉主板、inter主板、致铭主板</td>
<td>F12</td>
</tr>
<tr>
<td>微星主板、华擎主板、昂达主板</td>
<td>F11</td>
</tr>
<tr>
<td>映泰主板、冠名主板</td>
<td>F9</td>
</tr>
<tr>
<td>梅捷主板、<code>富士康主板</code></td>
<td>ESC/F12</td>
</tr>
<tr>
<td>七彩虹主板、精英主板</td>
<td>ESC/F11</td>
</tr>
<tr>
<td>斯巴达卡主板、双敏主板、铭瑄主板、捷波主板、磐正主板</td>
<td>ESC</td>
</tr>
<tr>
<td>顶星主板</td>
<td>F11/F12</td>
</tr>
</tbody>
</table>
</p>
</details>
<!-- more -->
<blockquote>
<p>正式安装</p>
<blockquote>
<p>至此我们就进入了安装程序 选择Install Ubuntu 回车直接安装</p>
<p>选择语言 中文简体在倒数第三个 然后选择键盘布局后进入更新选项</p>
</blockquote>
</blockquote>
<blockquote>
<p>一般我们用仅仅用 Ubuntu 来编程或者部署项目，娱乐一般用 Windows, 所以选择 <strong>最小安装</strong><br>
最下面的两个选项会拖慢安装的速度，这些工作可以放到安装完成后集中处理，所以也不勾选。</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://yinengmr.github.io//post-images/1587018424619.jpg" alt="" loading="lazy"></figure>
<p>选择安装类型</p>
<blockquote>
<p>第一和第二个选项安装的时候更省事，安装程序会自动分区，最后一个选项需要自己手动分区，安装的时候会麻烦一点，但是因为是手动分区，你对系统的分区情况也更加熟悉，但是新手不建议这个选项</p>
</blockquote>
<figure data-type="image" tabindex="5"><img src="https://yinengmr.github.io//post-images/1587018604298.jpg" alt="" loading="lazy"></figure>
<p>然后选择时区为上海 创建用户名后安装程序会安装一些必要的系统软件，安装过程会持续20到30分钟，完成后会弹出完成对话框点击重启即可</p>
<p>至此Ubuntu18.04 安装完成！</p>
<h1 id="终端命令行介绍">终端（命令行）介绍</h1>
<pre><code class="language-bash">user@ubuntu:~$ 
</code></pre>
<blockquote>
<p>命令行提示符<br>
<code>user@ubuntu:~$</code> 为命令提示符，<br>
@ 之前的部分为当前用户ID，<br>
@ 与 : 之间的部分，为您的主机名称，<br>
: 与 $ 之间的部分，为当前的路径。</p>
</blockquote>
<p>ubuntu 命令 <a href="https://www.jianshu.com/p/0f253188ab89">Ubuntu基本命令</a></p>
<h1 id="apt-包管理器-apt介绍与使用">apt 包管理器 apt介绍与使用</h1>
<details><summary><b>apt 和 apt-get 推荐使用apt </b></summary>
<p>
<table>
<thead>
<tr>
<th>apt命令</th>
<th>兼容命令</th>
<th>命令的功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>apt install</td>
<td>apt-get install</td>
<td>安装软件包</td>
</tr>
<tr>
<td>apt remove</td>
<td>apt-get remove</td>
<td>移除软件包</td>
</tr>
<tr>
<td>apt purge</td>
<td>apt-get purge</td>
<td>移除软件包及配置文件</td>
</tr>
<tr>
<td>apt update</td>
<td>apt-get update</td>
<td>刷新存储库索引</td>
</tr>
<tr>
<td>apt upgrade</td>
<td>apt-get upgrade</td>
<td>升级所有可升级的软件包</td>
</tr>
<tr>
<td>apt autoremove</td>
<td>apt-get autoremove</td>
<td>自动删除不需要的包</td>
</tr>
<tr>
<td>apt full-upgrade</td>
<td>apt-get dist-upgrade</td>
<td>在升级软件包时自动处理依赖关系</td>
</tr>
<tr>
<td>apt search</td>
<td>apt-cache search</td>
<td>搜索应用程序</td>
</tr>
<tr>
<td>apt show</td>
<td>apt-cache show</td>
<td>显示安装细节</td>
</tr>
<tr>
<td>apt list</td>
<td></td>
<td>列出包含条件的包（已安装，可升级等）</td>
</tr>
<tr>
<td>apt edit-sources</td>
<td></td>
<td>编辑源列表</td>
</tr>
</tbody>
</table>
</p></details>
<h2 id="切换软件源">切换软件源</h2>
<p>有时要用apt-get安装软件或依赖库，因为网络连接的问题会碰到找不到软件包失败的情况，这时可以将软件源更换为国内源，大部分同类问题就可以解决掉了。</p>
<p>这里主要介绍命令行下切换软件源，图形界面不作介绍</p>
<p>国内有很多Ubuntu的镜像源，包括阿里的、网易的，华为云 ，还有很多教育网的源，比如：清华源、中科大源。<br>
我们这里以清华源为例讲解如何修改Ubuntu 18.04里面默认的源。</p>
<p>1、输入命令修改sources.list文件，当然需要超级权限，所以要加sudo；</p>
<p>操作前请做好相应备份</p>
<blockquote>
<p>cp /etc/apt/sources.list /etc/apt/sources.list.bak<br>
sudo gedit /etc/apt/sources.list</p>
</blockquote>
<p>编辑/etc/apt/sources.list文件</p>
<p>2、在文件最前面添加以下条目：</p>
<pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse
</code></pre>
<p>修改完成后，保存文件，警告什么的都不理，然后运行下面的命令。</p>
<blockquote>
<p>sudo apt-get update  # 刷新存储库索引<br>
sudo apt-get upgrade   # 升级所有可升级的软件包</p>
</blockquote>
<p>到此完成国内源更新</p>
<h2 id="常用软件工具">常用软件工具</h2>
<h1 id="vim">vim</h1>
<p>Vim是从 vi（vi 是linux 内置文本编辑工具） 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p>
<blockquote>
<p>使用命令 <code>sudo apt install vim</code>安装</p>
</blockquote>
<p><a href="https://www.runoob.com/linux/linux-vim.html">vim 菜鸟教程链接</a></p>
<h1 id="输入法">输入法</h1>
<p>内置的输入使用起来不尽人意 所以推荐使用搜狗输入法</p>
<p><code>链接</code><a href="https://pinyin.sogou.com/linux/?r=pinyin">搜狗输入法下载</a><br>
<code>链接</code><a href="https://pinyin.sogou.com/linux/help.php">搜狗输入法安装指南</a></p>
<p>官网下载的安装包是.deb的文件 可以双击文件进行安装</p>
<p>命令行操作如下</p>
<pre><code class="language-shell">cd Download
sudo dpkg -i sogoupinyin_2.1.0.0086_i386.deb
</code></pre>
<h1 id="openssh的使用">openssh的使用</h1>
<p>首先用apt命令安装</p>
<pre><code class="language-bash">sudo apt install openssh-server
sudo apt install openssh-client
</code></pre>
<p>启动服务</p>
<pre><code class="language-bash">sudo service ssh start
</code></pre>
<p>查看服务状态</p>
<pre><code class="language-bash">service ssh status
* sshd is running
</code></pre>
<p>远程ssh登陆</p>
<p>使用ssh命令就可以在远程登陆主机了</p>
<pre><code class="language-bash">ssh username@10.132.xxx
</code></pre>
<p>Linux轻量级桌面xfce</p>
<ul>
<li><strong>git安装以及配置公钥</strong></li>
</ul>
<pre><code class="language-shell">sudo apt install git
</code></pre>
<p>使用git --version 检查一下</p>
<ul>
<li>
<p>**还不会使用git的可以去看阮一峰git教程 <code>链接</code><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a> **</p>
</li>
<li>
<p><strong>公钥配置 <code>链接</code> <a href="/post/git-ssh-key/">git 本地秘钥配置</a></strong></p>
</li>
</ul>
<h1 id="vscode">vscode</h1>
<ol>
<li><code>链接</code><a href="https://code.visualstudio.com/">vscode 软件下载</a> 使用以下命令安装</li>
</ol>
<pre><code class="language-shell">sudo dpkg -i vscode.deb
</code></pre>
<ol start="2">
<li>插件搜索和安装<br>
<img src="https://yinengmr.github.io//post-images/1586931833501.png" alt="" loading="lazy"></li>
</ol>
<blockquote>
<p><strong>自定义代码块</strong></p>
<blockquote>
<p>①  依次点击 文件 &gt; 首选项 &gt; 用户代码片段<br>
②  选择代码片段或创建代码片段（可以对现有的进行修改，也可以新建代码片段）</p>
</blockquote>
</blockquote>
<figure data-type="image" tabindex="6"><img src="https://yinengmr.github.io//post-images/1586938085776.png" alt="" loading="lazy"></figure>
<blockquote>
<p><strong>代码片段分两种：</strong></p>
<blockquote>
<p>① 全局代码片段（每种语言环境下都能触发代码块）。<br>
② 对应语言的局部代码片段（只能在对应语言环境下才能触发），新建全局代码片段会在 snippets 目录下生成 .code-snippets 为后缀的配置文件，而新建对应语言的代码片段会生成 对应语言 + .json 的配置文件。</p>
</blockquote>
</blockquote>
<p>javascript.json  javascript 自定义代码块片段</p>
<pre><code class="language-javascript">{
	&quot;Print to console&quot;: {
		&quot;prefix&quot;: &quot;js:start&quot;,
		&quot;body&quot;: [
			&quot;;(function(KK){&quot;,
			&quot;    var _this = null;&quot;,
			&quot;    KK.$1 = KK.$1 || {};&quot;,
			&quot;    _this = KK.$1 = {&quot;,
			&quot;        Main: {&quot;,
			&quot;            data:function(){&quot;,
			&quot;                return {&quot;,
			&quot;                }&quot;,
			&quot;            },&quot;,
			&quot;            methods:{&quot;,
			&quot;  &quot;,
			&quot;            },&quot;,
			&quot;            created:function(){&quot;,
			&quot;                console.log(123);&quot;,
			&quot;            }&quot;,
			&quot;        },&quot;,
			&quot;        init: function() {&quot;,
			&quot;            // iview.lang(\&quot;zh-TW\&quot;);&quot;,
			&quot;            var Component = Vue.extend(_this.Main);&quot;,
			&quot;            new Component().$mount('#app');&quot;,
			&quot;        },&quot;,
			&quot;    }&quot;,
			&quot;&quot;,
			&quot;})(APP)&quot;,
			&quot;;(function(){&quot;,
			&quot;    APP.$1.init();&quot;,
			&quot;})()&quot;
		],
		&quot;description&quot;: &quot;快速构建vuejs架构&quot;
	}
}

</code></pre>
<p>使用代码块</p>
<figure data-type="image" tabindex="7"><img src="https://yinengmr.github.io//post-images/1586938410538.png" alt="" loading="lazy"></figure>
<h1 id="deepin-安装">deepin 安装</h1>
<ul>
<li>同ubuntu安装 下载镜像 制作U盘启动盘输入系统即可</li>
<li><code>链接</code><a href="https://www.deepin.org/installation/">官方安装教程 内有视频教程</a></li>
</ul>
<h2 id="linux-推荐书籍">Linux 推荐书籍</h2>
<ul>
<li>[菜鸟推荐]<code>《鸟哥的 Linux 私房菜-基础篇·第三版》</code>by 鸟哥  豆瓣评分: 9.1</li>
<li>[图灵程序设计丛书]<code>《Linux命令行与shell编程大全第三版》</code></li>
<li>[进阶推荐]<code>《The Linux Command Line》</code> by William E. Shotts Jr.</li>
<li>[高级推荐]<code>《深入理解 Linux 内核》</code> by Daniel P.Bovet / Marco Cesati</li>
<li>[高级推荐]<code>《Linux/UNIX系统编程手册》</code> by Michael Kerrisk</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[国内加速访问 GitHub]]></title>
        <id>https://yinengmr.github.io/post/guo-nei-jia-su-fang-wen-github/</id>
        <link href="https://yinengmr.github.io/post/guo-nei-jia-su-fang-wen-github/">
        </link>
        <updated>2020-04-10T09:23:30.000Z</updated>
        <summary type="html"><![CDATA[<p>中国访问 GitHub 的速度不忍直视，那就叫一个慢！</p>
<blockquote>
<p>为什么访问速度会很慢？<br>
GitHub 在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是 GitHub 的分发加速网络的域名遭到 dns 污染。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>中国访问 GitHub 的速度不忍直视，那就叫一个慢！</p>
<blockquote>
<p>为什么访问速度会很慢？<br>
GitHub 在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是 GitHub 的分发加速网络的域名遭到 dns 污染。</p>
</blockquote>
<!-- more -->
<blockquote>
<p>如何解决 DNS 污染？<br>
通过修改 hosts 解决污染问题</p>
</blockquote>
<h2 id="解决方法">解决方法</h2>
<p><strong>不需要科（）学（）上网，也不需要开代理加速器。</strong></p>
<h2 id="一-查询网址对应的-ip-地址">一、查询网址对应的 IP 地址</h2>
<p>查询地址：https://www.ipaddress.com/</p>
<p>点击下面 域名（domain）自动跳转到 <code>ipaddress.com</code> 查询结果页面：</p>
<!-- more -->
<ul>
<li>
<p><a href="https://github.com.ipaddress.com/">github.com</a></p>
</li>
<li>
<p><a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></p>
</li>
<li>
<p><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></p>
</li>
</ul>
<p><img src="https://yinengmr.github.io//post-images/1586684413064.png" alt="" loading="lazy"><br>
<img src="https://yinengmr.github.io//post-images/1586684500843.png" alt="" loading="lazy"><br>
<img src="https://yinengmr.github.io//post-images/1586684556576.png" alt="" loading="lazy"></p>
<h2 id="二-修改本地系统-hosts-文件">二、修改本地系统 hosts 文件</h2>
<p><strong>hosts 文件路径：C:\Windows\System32\drivers\etc\hosts</strong></p>
<p>使用管理员权限修改host文件，将查询到的 IP 和 域名写在 hosts 文件的最后即可</p>
<pre><code>140.82.112.3	  github.com	
185.199.108.153   assets-cdn.github.com
185.199.109.153   assets-cdn.github.com
185.199.110.153   assets-cdn.github.com
185.199.111.153   assets-cdn.github.com
199.232.69.194    github.global.ssl.fastly.net
</code></pre>
<h2 id="三-刷新本地系统-dns-缓存">三、刷新本地系统 dns 缓存</h2>
<p>用 WIN + R 快捷键打开运行窗口，输入命令：cmd 并回车进入命令行窗口。</p>
<p>接着输入命令：</p>
<pre><code>ipconfig /flushdns 
</code></pre>
<p>回车后执行刷新本地 dns 缓存数据即可</p>
<p><code>文末</code> <strong>如果有一天用着用着发现又变慢了，有可能是GitHub的ip发生了变化，这时候要重新查询ip 再次修改host文件了</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重学前端]]></title>
        <id>https://yinengmr.github.io/post/chong-xue-qian-duan/</id>
        <link href="https://yinengmr.github.io/post/chong-xue-qian-duan/">
        </link>
        <updated>2019-10-28T08:13:30.000Z</updated>
        <summary type="html"><![CDATA[<p>这两年一直零散的学习，前端后端不定时的切换，有利也有弊，前端方面一直在做pc端相关的，却忽略了移动端，事实上人们更多的在使用移动设备，因此打算从移动端角度重学前端</p>
]]></summary>
        <content type="html"><![CDATA[<p>这两年一直零散的学习，前端后端不定时的切换，有利也有弊，前端方面一直在做pc端相关的，却忽略了移动端，事实上人们更多的在使用移动设备，因此打算从移动端角度重学前端</p>
<h2 id="-more-1移动端的touch事件"><!-- more --><br>
1.移动端的<code>touch</code>事件</h2>
<pre><code class="language-js">/*单击操作的特点
* 1.单击只有一根手指
* 2.判断手指开始触摸和手指松开的时间差异不能大于指定的值  300/150
* 3.保证没有滑动操作，如果有抖动必须保证抖动的距离在指定范围内*/
var div=document.querySelector(&quot;div&quot;);

var startTime,startX,startY;
div.addEventListener(&quot;touchstart&quot;,function(e){
    /*判断是否只有一根手指进行操作*/
    if(e.targetTouches.length &gt; 1){ //说明不止一个手指
        return;
    }
    /*记录手指开始触摸的时间*/
    startTime=Date.now();
    /*记录当前手指的坐标*/
    startX= e.targetTouches[0].clientX;
    startY= e.targetTouches[0].clientY;
    /*来做一些与事件相关的初始化操作*/
})

/*添加手指滑动事件，当手指在屏幕上滑动时触发:move事件是持续触发*/
div.addEventListener(&quot;touchmove&quot;,function(){
    console.log(&quot;touchmove&quot;);
});

/*touchend：当手指松开时候触发，意味着当前元素上已经没有手指对象了,
所以无法通过targetTouches来获取手指对象*/
div.addEventListener(&quot;touchend&quot;,function(e){
    /*判断是否只有一根手指进行操作*/
    if(e.changedTouches.length &gt; 1){ //说明不止一个手指
        return;
    }
    /*判断时间差异  150ms*/
    console.log(Date.now()-startTime);
    if(Date.now()-startTime &gt; 150){ //长按操作
        return;
    }
    /*判断松开手指时的坐标与触摸开始时的坐标的距离差异*/
    var endX=e.changedTouches[0].clientX;
    var endY=e.changedTouches[0].clientY;
    /*这里暂且将距离差异定为6*/
    if(Math.abs(endX-startX) &lt; 6 &amp;&amp; Math.abs(endY-startY) &lt;6){
        console.log(&quot;这就是移动端的单击事件--tap事件&quot;);
        /*执行tap事件响应后的处理操作*/
    }
})

/*添加触摸意外中断事件*/
div.addEventListener(&quot;touchcancel&quot;,function(){

});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[搬运][译] 作为程序员你不能成功的 10 个迹象]]></title>
        <id>https://yinengmr.github.io/post/2019-10-10-001/</id>
        <link href="https://yinengmr.github.io/post/2019-10-10-001/">
        </link>
        <updated>2019-10-10T02:47:16.000Z</updated>
        <summary type="html"><![CDATA[<p>编程是人类的基本技能，就像阅读、写作和算术一样。任何人都可以通过时间和努力学习编程。</p>
]]></summary>
        <content type="html"><![CDATA[<p>编程是人类的基本技能，就像阅读、写作和算术一样。任何人都可以通过时间和努力学习编程。</p>
<!-- more -->
<blockquote>
<p>原文地址：10 Signs You Will Suck at Programming<br>
原文作者：Jonathan Bluks<br>
译文出自：掘金翻译计划<br>
本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/10-signs-you-will-suck-at-programming.md">github.com/xitu/gold-m…</a><br>
译者：xionglong58<br>
校对者：renyuhuiharrison, yzw7489757</p>
</blockquote>
<p>我经常在 Reddit、Quora 上遇到有人问，“怎样才能知道我将来会不会成为一名成功的程序员？”（事实上，这篇文章实际上是我在 Quora 上给出的答案的一个扩展。）当人们考虑更换职业，或者是对软件开发感兴趣，并且对它需要些什么感到好奇时，不可避免地会出现编程问题。<br>
我认为对没有受过任何正规计算机培训的人来说，这是一个主要障碍。你会很自然地认为，如果你不擅长编程，那么你是不可能成功的。这有点像你想成为一名演员，并想知道你是否擅长表演。<br>
作为一名 Web 全栈开发讲师，我教过很多“初学程序员”。好消息是我很少发现有无法学习编程的学生。我认为它是人类的一种基本技能，就像阅读、写作和算术一样。任何人都可以做到，这是我们人类能力的一部分，但也确实需要学习。<br>
在过去两年的教学中，我看到有很多学生努力学习编程，同时，还发现在他们的学习过程中出现的一些共同问题。如果你看一下下面的清单并联系自身情况，请放心，你会在编程的过程中受挫并且应该在你受挫时做点什么。但是，如果你仍然致力于成为开发人员的目标，那么你可以轻松地面对这些问题并做出改变。</p>
<blockquote>
<p>编程是人类的基本技能，就像阅读、写作和算术一样。任何人都可以通过时间和努力学习编程。</p>
</blockquote>
<p>下面的清单将帮助你了解你是否会在编程方面受挫，以及如果你想改变它，你可以做些什么。</p>
<h3 id="1-缺乏好奇心">1 | 缺乏好奇心</h3>
<blockquote>
<p>如果你对计算机和技术原理的缺乏好奇心，作为一个程序员，你将永远不会成功。</p>
</blockquote>
<p>学习的基本要求是对你正在学习的东西有积极兴趣。如果你没有对技术感到好奇的头脑，你就没有足够的干劲去坚持学习成功码农必备的更全面更深入的知识。</p>
<p>相比之下，技术世界就像是一片汪洋大海，它充满了有趣的领域，互相关联的思想，以及激发人类想象力的各种可能性。</p>
<blockquote>
<p><strong>找到你的好奇心：</strong> 问问自己是否真的对编程感兴趣。如果你诚实的答案是没有，那么还是去寻找你感&gt; 兴趣的东西吧，节省你自己的时间和精力。但是，如果你的回答是“是”，那么请你自己找一些你之前&gt; 没有注意到的新东西，意识到这是一个浩瀚的海洋并深入其中。</p>
</blockquote>
<h3 id="2-缺乏主动和灵活多变">2 | 缺乏主动和灵活多变</h3>
<blockquote>
<p>如果你不培养独立解决问题的能力，你就永远不会成为一个成功的程序员。</p>
</blockquote>
<p>毫无疑问，要成为一个成功的开发人员，你必须对自己的学习能力充满信心。这实际上是一项基本的生活技能 —— 如果你已经过了18岁，没有人有义务教你任何东西。这就是现实。你得自行查找信息，并帮助你去了解对自己来说哪些是重要的信息。<br>
在发展的世界里，你所需要的所有信息都可以在一个神奇的地方找到，这个地方以前被称为信息高速公路。这个庞大的图书馆有一个巨大的入口：谷歌。当你想获得技术中所需的技能时，首先要跨越的障碍是学会在谷歌中输入你想要的任何东西并获取你需要的信息。<br>
除了要做一个优秀的 googler，所有编程语言都有文档和规范，这些文档和规范非常明确地说明了该语言的工作方式。就像用字典一样 —— 当你看到一个你不认识的词时，你就会在字典中查出来。作为一名程序员，最快速、最可靠的方法就是直接阅读文档。就是这么简单。</p>
<blockquote>
<p><strong>利用资源：</strong> 要意识到所有你需要的答案都在那儿等着你。向别人寻求答案之前，一定得要求自己先使用谷歌，同时要翻阅文档。这样当你已经尝试过却没有找到你需要的答案时，也能够节省他人的时间。</p>
</blockquote>
<h3 id="3-面对问题时缺乏毅力">3 | 面对问题时缺乏毅力</h3>
<blockquote>
<p>如果你在面对问题时轻易放弃，那么作为一名程序员，你永远不会成功。</p>
</blockquote>
<p>编程的本质是解决问题。这也是发明计算机的全部原因！每当你开始编写程序时，你都会遇到一堆问题。一旦你解决了一个问题，它背后可能又会有另一个问题。你正在取得进步，但总会遇到新问题。<br>
面对一堆的问题可能会让人望而生畏、令人沮丧的。如果你觉得程序就应该是“正常工作”，那么当问题持续出现，一点一点地击溃你的信心时，你就没有精力再坚持下去。 确切地说你的工作就是找出程序为什么不能正常工作。<br>
根据我在课堂上的经验，通常每个班都有一两个学生，他们似乎比其他学生更擅长发现那些不太常见、令人费解的问题。我提醒学生，他们面对的问题越多，学习越深入和透彻的可能性就越大。如果他们能通过这些问题获得理解，他们会很快发现他们更自信，因为他们面对和解决的问题比普通学生多。</p>
<blockquote>
<p><strong>耐心地接受：</strong> 你需要意识到问题是不可避免的，问题本身不是问题，其事实上对你的挑战。你面临和克服的每一个挑战都会让你更深入地了解并更好地应对新挑战，从而迅速解决旧的挑战。</p>
</blockquote>
<h3 id="4-克服问题时没有成就感">4 | 克服问题时没有成就感</h3>
<blockquote>
<p>如果你在解决问题后没有感到兴奋和成就感，那么作为一名程序员，你永远不会成功。</p>
</blockquote>
<p>与前一个问题相关的是，一旦你成功地解决了一个问题，就缺乏“良好的感觉”。当修复 bugs 和问题变成了一个永远不会停止的单调工作时，你就会失去与克服问题的兴奋感。<br>
当你克服一个问题时，你需要的是多巴胺的释放。这类似于在视频游戏中完成一个关卡，或者解决一个像纵横填字游戏或数独这样的挑战。我们都知道坚持通过一个挑战，然后最终赢得比赛会有一种很好的感觉。但是如果你失去了感受这些感觉的能力，或者一开始从来没有真正在意过这些感受，那么你将无法体验到编程带来的快乐。如果你把编程看作是一种痛苦，你只想尽可能容易地得到结果，那么你永远不会真正成为一个成功的程序员。</p>
<blockquote>
<p><strong>庆祝胜利：</strong> 每当你解决了一个你一直在努力解决的问题时，不管这个问题有多小，都要为你的成就感到自豪，休息一下，并祝贺你自己完成了一项出色的工作。让成功的感觉渗透进身体，让你在面临下一个问题充满活力。</p>
</blockquote>
<h3 id="5-对于学习和理解没有耐心">5 | 对于学习和理解没有耐心</h3>
<blockquote>
<p>如果你对学习不耐烦，并且期望能够快速而轻松地掌握所有东西，那么你将永远不会在编程上成功。</p>
</blockquote>
<p>我们人类并不是完美的生物。即使世界的前进速度变得越来越快，计算机是其中的一个重要原因，我们也只能尽可能快地前进。我们的大脑以一定的速度工作，并且依赖我们的过去、我们的信念、我们的情绪状态、我们的健康...，我们将以不同的速度学习和整合信息。<br>
技术的世界就像一片广阔的海洋。 你永远不会走到尽头，你永远不会成为一个没有其他东西可以学习的高手。如果你让自己负担过重，你就会总有“追赶”的感觉，并总觉得自己知道的不够多。如果你不能接受你所知道的东西后再去学习一点，你就会迷失自我，然后放弃。<br>
相反，你应该享受学习之旅。你获得的每一点知识，或是新技能，都应该是让你感到兴奋。像解决问题一样，你需要让自己感到自豪，因为你认识到自己已经向前迈出了一步，即使这是一个很小的一步。</p>
<blockquote>
<p>认可你的进步：要学的东西有很多，编程的旅途永远不会结束。但是知识是需要累积的，所以要为你所知道的感到自豪，并且相信你在学习中所做的每一个努力都将为你的职业生涯打下一个坚实的知识基础。</p>
</blockquote>
<h3 id="6-对思考问题感到厌烦或疲惫">6 | 对思考问题感到厌烦或疲惫</h3>
<blockquote>
<p>如果你懒于思考，把集中注意力的思考当成乏味无聊的任务，那么你将永远不会在编程上成功。</p>
</blockquote>
<p>编程是一种思考活动。作为人类，我们确实擅长思考，但事实是，即使每天都在不自觉地思考，我们仍懒于去主动思考。如果你不养成思考问题的习惯，那么很难在一段时间内集中精力解决一个问题。<br>
这种情况的症状包括：茫然地盯着屏幕、感觉一团云笼罩着你、拖延问题、在浏览器标签之间来回切换，拼命地浏览 StackOverflow 寻找“答案”。这些迹象表明，你的精神已经受限，需要找到一条出路。<br>
在编程的时候，你会感到疲倦，并且思考就像锻炼身体一样消耗体力。当你不习惯运用你所需的精神力量时，你将很难集中注意力。但这就像去健身房一样，你实际操作的越多，你就会变得越强壮。</p>
<blockquote>
<p><strong>你的精神如同肌肉：</strong> 请相信，你的大脑就像一块肌肉 —— 当你不停使用它的时候，它在思考过程中才会变得更好和更有效率。当你把各个部件拼凑在一起并运用精神时，会发现解决方案变得容易了很多。</p>
</blockquote>
<h3 id="7-无法独立思考">7 | 无法独立思考</h3>
<blockquote>
<p>如果你期望着别人替你思考，并且不愿意认真审视自己的处境，你将永远不会成为一个真正成功的程序员。</p>
</blockquote>
<p>当你在学习新的东西时，很容易觉得你缺乏知识和经验来支撑自己的观点。采取主动或做错事/说错话似乎有风险。<br>
我们对犯错有一种固有的恐惧感。当对犯错的恐惧抑制了你的探索和好奇心时，就会扼杀你获取真正知识的能力，知识是从经验和“失败”中获得的。 当你需要依赖“大师”的观点、热门博主、最佳实践或“教科书”答案时，那么说明你还没有真正融合对编程的有用知识。<br>
你需要对什么有用，什么没用形成自己的观点。需要明白为什么你觉得你的解决方案有用，以及它的好处是什么。需要建立一个微妙的视角，去超越那些显而易见的东西。你需要能够为你的观点“辩护”，然后在这个过程中，如果你发生了改变，你就可以拥有新的观点。</p>
<blockquote>
<p><strong>自己多想想</strong>：通过你的经验和批判性思维技巧建立你自己的观点。做出合理的猜测，坚定立场，并愿意随着新信息的出现而做出改变。</p>
</blockquote>
<h3 id="8-僵化-狭隘-混乱的思维">8 | 僵化、狭隘、混乱的思维</h3>
<blockquote>
<p>如果你的思维僵化，那么你将很难通过扩展思维的条理化和集中化保持代码的条理化，僵化的思维让你永远不会在编程上取得成功。</p>
</blockquote>
<p>我有时在学生中会看到两个极端。第一种是僵化和狭隘的思维方式。这种态度拒绝帮助、不在乎反馈、不会做出改变，只从一个角度出发看事情，忽略他人的意见。<br>
我看到的第二种极端是思维混乱。学生们似乎使事情变得的复杂化，他们的代码杂乱无章，难以理解。他们过度思考问题，原本 10 行代码就足够解决问题，他们硬是写出 100 行的代码。<br>
当这两种思维方式结合在一起时，结果就是一种极端保守的的编程方法，就像导致一层又一层的修复和“黑客攻击”的一种蛮力方法。我们需要的是重新审视解决方案、重新评估它、放弃最初的方法和重新组织的能力。<br>
无法看到其他可能性或接受反馈会抑制成长和提升的能力。杂乱无章会减慢你的速度，阻止你看到那些原本显而易见的方法，你的工作质量也会下降。</p>
<blockquote>
<p>自我反省：你需要退后一步，以便总览全局。你怎么才能做得更好？你能做些什么让你的生活更轻松吗？你错过了哪些可以帮助到你的东西？</p>
</blockquote>
<h3 id="9-需要正确的答案而不是鉴别出好和坏的答案">9 | 需要“正确”的答案，而不是鉴别出“好”和“坏”的答案</h3>
<blockquote>
<p>如果你认为编程的最终目标是找到一个正确的解决方案，而不是一系列解决方案，那么作为一个程序员，你将永远不会真正成功。</p>
</blockquote>
<p>当学生开始学习技能或编程时，往往他们都想知道自己所做的是否是“正确的”，而答案总是“视情况而定”。<br>
计算机科学是一门评估权衡的科学。在不同的环境下，哪条路更好？这完全取决于具体的环境和目标。当你把编程看作是一个有正确答案或错误答案的测试时，你就失去了对全局的认识，也放弃了你的创造力。任何答案都可以是“正确的”，前提是你能根据具体情况证明这一点。<br>
现实情况是，编程更像是写诗或写短篇小说（如果程序很大，则可能是小说）。在你的代码中可以看到一种美学和美感，有时只有你和其他一些程序员能读懂。你的解决方案的理由，以及构思答案的思路，比“正确的方式”或“错误的方式”更重要。拥有一个艺术家的头脑可以让你玩转选项和可能性，而不是认为只有一种方式。这就是编程的美，有很多方法可以解决一个问题，对不同可能性的权衡会让人感觉哪种方法最适合眼下的情况。</p>
<blockquote>
<p>来点创意: 认识到解决问题的方法有很多种，通过经验和对问题的解析，随着时间的积累，你将懂得如何辨析最优方案，你就会产生细微的理解。纵观全局，去想象不同的可能性，相信你的直觉，你会得到更令人满意的更好的解决方案。</p>
</blockquote>
<h3 id="10-不注意细节">10 | 不注意细节</h3>
<blockquote>
<p>如果你掩盖细节，忽略一些小事情，你将永远不会成为一个真正成功的程序员。</p>
</blockquote>
<p>计算机是精确的机器。当涉及到计算机编程时，你需要按照计算机期望的方式明确地提供必要的命令。如果你不这样做，什么都不会奏效。完全没有折中 —— 要么能，要么不能。<br>
这意味着当你在编程时，你必须注意细节。每个空格、括号或分号都要考虑。如果稍有不对，一切都是白谈。当计算机打印出一条错误信息时，你必须能够审查信息并准确理解它想要所告诉你的内容。事实是，如果你错过了一些细节，你可能要花几个小时来找 bug，但实际上只是一个输入错误导致的问题。<br>
正如他们所说，魔鬼在细节中，这对于编程来说绝对是正确的。</p>
<blockquote>
<p><strong>注意细节</strong>：细节很重要，你必须接受它。一旦你注重细节，你就可以开始通过浏览你的代码找出任何不合适的地方。你要能够有条不紊地组织好代码，并借助工具来更快地处理问题。</p>
</blockquote>
<h3 id="额外补充-商业化的思维">额外补充: 商业化的思维</h3>
<p>这是我注意到这样一个现象 —— 那些特别有商业头脑的学生，往往关注结果而不是过程。他们希望得到一个“可以使用的 app”，这将推动他们的商业理念向前发展，他们希望“先进入市场”，并且他们将经验积累视为他们实现商业目标的障碍。<br>
在回顾那些难以在帮助下成长为程序员的学生时，我发现对于学习过程的不耐烦，阻碍了真正地理解技术。这些学生倾向于将技术视为达到目的的手段，而不是真正地探索和享受的知识。<br>
作为对此的一个自然延伸，我发现有些学生更倾向于经商，他们在学习上很吃力，但通常会很快让自由职业客户报名参加他们自己实际上都不会的工作。他们迅速地寻找资源/模板来让项目获得客户的满意，或者将工作外包给其他人。 <strong>他们确实不擅长编程，但却很擅长让人们付钱给他们编程!</strong></p>
<p>所以我想补充的是，那些渴望创业的学生，他们在销售、人际关系和商业发展方面都很优秀，但比其他人更难以学习编程技能。他们天生渴望创造生财的门路，并将人们与解决方案联系起来，这让他们对编程中繁琐的细节失去了耐心。</p>
<h3 id="总结">总结</h3>
<p>虽然编程是一项很难学习的技能，但它肯定是大多数人都能学的。上面的清单包含了阻碍学习的一些态度和思维方式，但是大多数人可以克服它们，并在编程领域发展自己的能力 —— 如果不是精通的话。</p>
<p>如果你对学习编程感兴趣，我鼓励你开始这个旅程。记住上面的清单，网上有很多可以让你快速前进的资源，快去探索吧，你不会后悔的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[openresty 学习参考资料]]></title>
        <id>https://yinengmr.github.io/post/openresty-study/</id>
        <link href="https://yinengmr.github.io/post/openresty-study/">
        </link>
        <updated>2019-10-07T11:08:53.000Z</updated>
        <summary type="html"><![CDATA[<p>openresty 学习参考资料</p>
]]></summary>
        <content type="html"><![CDATA[<p>openresty 学习参考资料</p>
<!-- more -->
<p>参考网站</p>
<p><a href="http://openresty.org/cn/">OpenResty 官网</a></p>
<p><a href="https://moonbingbing.gitbooks.io/openresty-best-practices/content/">OpenResty最佳实践</a><br>
<a href="https://blog.csdn.net/orangleliu/article/details/60325268">OpenResty 技能图谱以及学习要点</a><br>
<a href="http://jinnianshilongnian.iteye.com/blog/2190344">跟我学OpenResty(Nginx+Lua)开发目录贴</a><br>
<a href="https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html">agentzh 的 Nginx 教程</a><br>
<a href="https://bg2bkk.github.io/post/nginx-gdb-utils%E7%9A%84%E7%BC%96%E8%AF%91%20%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/">nginx gdb utils的编译 安装和使用</a><br>
<a href="https://segmentfault.com/a/1190000007867494">OpenResty debugger: lua-resty-repl</a><br>
<a href="http://www.guohuawei.com/archives/how-to-debug-in-openresty.html">openresty 如何调试</a><br>
<a href="http://www.cnblogs.com/dakewei/archive/2017/12/23/8093011.html">linux性能分析工具之火焰图</a><br>
<a href="https://www.jianshu.com/p/271db393cf58">使用ZeroBrane远程在线调试Openresty, Nginx的Lua程序</a></p>
<p><a href="https://luarocks.org/">Luarocks 官网</a><br>
<a href="https://www.cnblogs.com/xiangnan/p/7082511.html">将luarocks整合进openresty</a><br>
<a href="https://blog.csdn.net/fozex/article/details/27353781">为git设置代理</a></p>
<p><a href="http://luajit.org/">Luajit 官网</a><br>
<a href="https://blog.csdn.net/ecidevilin/article/details/78630176">浅入浅出LuaJIT</a><br>
<a href="https://www.cnblogs.com/zwywilliam/p/5992737.html">luajit官方性能优化指南和注解</a><br>
<a href="https://www.cnblogs.com/quicklyslow/p/4794430.html">Luajit-2.1.0-beta1的发布和生成arm64用bytecode的解脱</a><br>
<a href="https://my.oschina.net/362228416/blog/846741">penresty 应用打包并使用luajit编译lua代码实现简单加密</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIT ssh-key 本地秘钥生成]]></title>
        <id>https://yinengmr.github.io/post/git-ssh-key/</id>
        <link href="https://yinengmr.github.io/post/git-ssh-key/">
        </link>
        <updated>2018-05-10T13:07:34.000Z</updated>
        <content type="html"><![CDATA[<p>一、设置git的username 和 useremail</p>
<pre><code class="language-shell">git config --global user.name &quot;user.name&quot;
git config --global user.email &quot;user.email&quot;
</code></pre>
<p>二、生成秘钥<br>
1）查看是否有ssh秘钥</p>
<pre><code class="language-shell">ls ~/.ssh
id_rsa  id_rsa.pub  known_hosts
</code></pre>
<p>2）没有id_rsa 和 id_rsa.pub则生成</p>
<pre><code class="language-shell">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;
</code></pre>
<p>执行完ssh-keygen之后会在，用户目录下的.ssh文件下，生成一个id_rsa文件和id_rsa.pub文件。</p>
<ul>
<li>id_rsa文件是私钥，要保存好，放在本地，私钥可以生产公钥，反之不行。</li>
<li>id_rsa.pub文件是公钥，可以用于发送到其他服务器，或者git上</li>
</ul>
<p>3） 设置ssh无密码访问git仓库</p>
<pre><code class="language-shell"> cat id_rsa.pub
</code></pre>
<p>复制字符串 到网站添加</p>
<p>以github为例，找到个人主页，点击[settings],找到[SSH and GPG keys] ，新建SSH keys,将本地id_rsa.pub的内容复制到key里面，tittle可以随便填写，这样就配置好了。</p>
]]></content>
    </entry>
</feed>